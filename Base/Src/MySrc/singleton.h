//============================================================================
// 
// シングルトンクラステンプレート、ヘッダーファイル [singleton.h]
// Author : 福田歩希
// 
//============================================================================

#pragma once

#if 0
//****************************************************
// コンセプトの定義
//****************************************************
template <typename T>
concept AutoInitializableAndFinalizable = requires(T t)
{
	{ t.Initialize() } -> std::same_as<bool>;
}
&& requires(T t)
{
	{ t.Finalize() } -> std::same_as<void>;
};
#endif

//****************************************************
// シングルトンクラステンプレートの定義
//****************************************************
template <typename T>
class CSingleton
{
public:

	//****************************************************
	// operator
	//****************************************************
	CSingleton& operator=(const CSingleton&) = delete; // コピー代入演算子を削除
	CSingleton& operator=(CSingleton&&)      = delete; // ムーブ代入演算子を削除

	//****************************************************
	// special function
	//****************************************************
	CSingleton(const CSingleton&) = delete; // コピーコンストラクタを削除
	CSingleton(CSingleton&&)      = delete; // ムーブコンストラクタを削除

	//****************************************************
	// static function
	//****************************************************

	// インスタンスの参照を取得します
	static T& RefInstance();

protected:

	//****************************************************
	// special function
	//****************************************************
	        CSingleton()  = default; // デフォルトコンストラクタ
	virtual ~CSingleton() = default; // デストラクタ

	//****************************************************
	// data
	//****************************************************
	static std::unique_ptr<T> s_upInstance; // インスタンスのポインタ
};

// テンプレート実装ファイル
#include "singleton.impl"