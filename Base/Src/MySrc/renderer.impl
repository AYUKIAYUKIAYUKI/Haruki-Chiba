//============================================================================
// 
// レンダラー、テンプレート実装ファイル [renderer.impl]
// Author : 福田歩希
// 
//============================================================================

#pragma once

//============================================================================
// 更新処理ρ
//============================================================================
template <UpdatableContainer T>
void CRenderer::Update_ρ(const T& t)
{
	// ImGuiの更新を開始
	ImGui_ImplDX9_NewFrame();
	ImGui_ImplWin32_NewFrame();
	ImGui::NewFrame();

#if 0
	// ウィンドウサイズの変更があったら
	if (m_ResizeWindowWidth != 0 && m_ResizeWindowHeight != 0)
	{
		// バックバッファのサイズを調整
		AdjustBuckBufferSize();
	}
#endif

	// 各インスタンスの更新
	for (auto& it : t)
	{
		it->Update();
	}

	// ImGuiの更新を終了
	ImGui::EndFrame();
}

//============================================================================
// 更新処理ε
//============================================================================
template <typename T>
void CRenderer::Update_ε(T&& fp)
{
	// ImGuiの更新を開始
	ImGui_ImplDX9_NewFrame();
	ImGui_ImplWin32_NewFrame();
	ImGui::NewFrame();

#if 0
	// ウィンドウサイズの変更があったら
	if (m_ResizeWindowWidth != 0 && m_ResizeWindowHeight != 0)
	{
		// バックバッファのサイズを調整
		AdjustBuckBufferSize();
	}
#endif

	// 各インスタンスの更新
	fp();

	// ImGuiの更新を終了
	ImGui::EndFrame();
}

//============================================================================
// 描画処理ρ
//============================================================================
template <DrawableContainer T>
void CRenderer::Draw_ρ(const T& t)
{
	// 画面バッファクリア
	m_pDevice->Clear(
		0,                                  // クリアしたい四角形の数を設定 (ビューポート全体の場合は0)
		nullptr,                            // 四角形構造体のポインタを設定 (nullptrを渡すことでビューポート全体の範囲)
		D3DCLEAR_TARGET | D3DCLEAR_ZBUFFER, // クリアするサーフェスを指定する
		D3DCOLOR_ARGB(0, 0, 0, 0),          // このカラーでターゲットをクリア
		1.0f,                               // この値に大してデプスバッファをクリア
		0);                                 // この値でステンシルバッファをクリア

	if (SUCCEEDED(m_pDevice->BeginScene()))
	{
		// カメラをセット
		if (CCamera::GetStateUseFreeCam())
		{
			CCamera::RefFreeCam()->SetCamera({ 0.0f, 0.0f, 0.0f });
		}
		else
		{
			CCamera_Manager::RefInstance().RefSelectCamera().SetCamera({ 0.0f, 0.0f, 0.0f });
		}

		// 各インスタンスの描画
		for (auto& it : t)
		{
			it->Draw();
		}

		// テキストの描画
		PrintText();

		// ImGuiの描画
		ImGui::Render();
		ImGui_ImplDX9_RenderDrawData(ImGui::GetDrawData());

		// 描画終了
		m_pDevice->EndScene();
	}

	// 裏画面を表画面に反映
	m_pDevice->Present(nullptr, nullptr, nullptr, nullptr);
}

//============================================================================
// 描画処理ε
//============================================================================
template <typename T>
void CRenderer::Draw_ε(T&& fp)
{
	// 画面バッファクリア
	m_pDevice->Clear(
		0,                                  // クリアしたい四角形の数を設定 (ビューポート全体の場合は0)
		nullptr,                            // 四角形構造体のポインタを設定 (nullptrを渡すことでビューポート全体の範囲)
		D3DCLEAR_TARGET | D3DCLEAR_ZBUFFER, // クリアするサーフェスを指定する
		D3DCOLOR_ARGB(0, 0, 0, 0),          // このカラーでターゲットをクリア
		1.0f,                               // この値に大してデプスバッファをクリア
		0);                                 // この値でステンシルバッファをクリア

	if (SUCCEEDED(m_pDevice->BeginScene()))
	{
		// カメラをセット
		if (CCamera::GetStateUseFreeCam())
		{
			CCamera::RefFreeCam()->SetCamera({ 0.0f, 0.0f, 0.0f });
		}
		else
		{
			CCamera_Manager::RefInstance().RefSelectCamera().SetCamera({ 0.0f, 0.0f, 0.0f });
		}

		// 各インスタンスの描画
		fp();

		// テキストの描画
		PrintText();

		// ImGuiの描画
		ImGui::Render();
		ImGui_ImplDX9_RenderDrawData(ImGui::GetDrawData());

		// 描画終了
		m_pDevice->EndScene();
	}

	// 裏画面を表画面に反映
	m_pDevice->Present(nullptr, nullptr, nullptr, nullptr);
}