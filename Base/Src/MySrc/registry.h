//============================================================================
// 
// レジストリクラステンプレート、ヘッダーファイル [registry.h]
// Author : 福田歩希
// 
//============================================================================
	
#pragma once

//****************************************************
// レジストリクラステンプレートの定義
//****************************************************
template <typename T>
class CRegistry
{
public:

	//****************************************************
	// special function
	//****************************************************
	CRegistry();  // デフォルトコンストラクタ
	~CRegistry(); // デストラクタ

	//****************************************************
	// function
	//****************************************************s

	// 初期化処理
	// Path      -> データのパス
	// fpFactory -> データのためのファクトリ関数
	// fpRelease -> データのためのリリース関数
	bool Initialize(const std::string& Path, std::function<T(const std::string&)>&& fpFactory, std::function<void(T&)>&& fpRelease);
	
	// 終了処理
	void Finalize();

	// キーを受け取って、保有している物を返す
	T BindAtKey(const std::string& Key);

	// ランタイム向けのの新規登録
	bool Register(const std::string& Key, const std::string& Path);

private:

	//****************************************************
	// data
	//****************************************************
	std::function<T(const std::string&)> m_fpFactory; // データのためのファクトリ関数
	std::function<void(T&)>              m_fpRelease; // データのためのリリース関数
	std::map<std::string, T>             m_mData;     // キーとデータのマップ
};

// テンプレート実装ファイル
#include "registry.impl"