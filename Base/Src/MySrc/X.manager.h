//============================================================================
// 
// Xモデルマネージャー、ヘッダーファイル [X.manager.h]
// Author : 福田歩希
// 
//============================================================================

#pragma once

//****************************************************
// インクルードファイル
//****************************************************
#include "singleton.h"
#include "registry.h"

//****************************************************
// Xモデルマネージャークラスの定義
//****************************************************
class CXManager final : public CSingleton<CXManager>
{
	//****************************************************
	// フレンド宣言
	//****************************************************
	friend struct std::default_delete<CXManager>;
	friend CXManager& CSingleton<CXManager>::RefInstance();

	//****************************************************
	// 静的メンバ変数の定義
	//****************************************************
	static constexpr const char* INITIALIZE_PATH = "Data\\JSON\\Model.List.json";

public:

	//****************************************************
	// モデル情報の構造体の定義
	//****************************************************
	struct MODEL
	{
		LPD3DXMESH			pMesh;    // メッシュ情報
		D3DXVECTOR3			Size;     // サイズ
		LPD3DXBUFFER		pBuffMat; // マテリアル情報
		DWORD				dwNumMat; // マテリアル数
		D3DXCOLOR*			apColMat; // マテリアル色	
		LPDIRECT3DTEXTURE9* apTex;    // テクスチャ
	};

	//****************************************************
	// function
	//****************************************************

	// レジストリの参照の取得
	inline CRegistry<MODEL*>& RefRegistry() const { return *m_upRegistry; }

private:

	//****************************************************
	// special function
	//****************************************************
	CXManager();           // デフォルトコンストラクタ
	~CXManager() override; // デストラクタ

	//****************************************************
	// function
	//****************************************************
	bool Initialize(); // 初期化処理
	void Finalize();   // 終了処理
	
	// サイズ読み込み
	D3DXVECTOR3 LoadSize(const std::string& sPath);

	//****************************************************
	// data
	//****************************************************
	std::unique_ptr<CRegistry<MODEL*>>        m_upRegistry; // Xモデル用レジストリ
	std::map<std::string, LPDIRECT3DTEXTURE9> m_mCache;     // テクスチャのキャッシュ情報
};