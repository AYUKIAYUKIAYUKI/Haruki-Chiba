
// VS2022が完全対応するまでモジュールは全面的に使用出来ないものとします

////============================================================================
//// 
//// シングルトンクラステンプレート、モジュールインターフェース [singleton.ixx]
//// Author : 福田歩希
//// 
////============================================================================
//
////****************************************************
//// モジュール宣言
////****************************************************
//export module singleton;
//
////****************************************************
//// シングルトンクラステンプレートの定義
////****************************************************
//export template <typename T>
//class CSingleton
//{
//public:
//
//	//****************************************************
//	// operator
//	//****************************************************
//	CSingleton& operator=(const CSingleton&) = delete; // コピー代入演算子を削除
//	CSingleton& operator=(CSingleton&&)      = delete; // ムーブ代入演算子を削除
//
//	//****************************************************
//	// special function
//	//****************************************************
//	CSingleton(const CSingleton&) = delete; // コピーコンストラクタを削除
//	CSingleton(CSingleton&&)      = delete; // ムーブコンストラクタを削除
//
//	//****************************************************
//	// static function
//	//****************************************************
//
//	// インスタンスの参照を取得します
//	static T& RefInstance();
//
//protected:
//
//	//****************************************************
//	// special function
//	//****************************************************
//	        CSingleton()  = default; // デフォルトコンストラクタ
//	virtual ~CSingleton() = default; // デストラクタ
//
//	//****************************************************
//	// data
//	//****************************************************
//	static std::unique_ptr<T> s_upInstance; // インスタンスのポインタ
//};
//
////****************************************************
//// 静的メンバ変数の初期化
////****************************************************
//
//// インスタンスのポインタ
//template <typename T>
//std::unique_ptr<T> CSingleton<T>::s_upInstance = nullptr;
//
////============================================================================
//// インスタンスの参照を取得
////============================================================================
//template <typename T>
//T& CSingleton<T>::RefInstance()
//{
//	// 初回生成以降、インスタンスの参照を渡す
//	if (s_upInstance)
//	{
//		return *s_upInstance;
//	}
//
//	// インスタンス未生成の場合のみ、新規生成
//	std::unique_ptr<T> upInstance(DBG_NEW T());
//	s_upInstance = std::move(upInstance);
//
//	// 引数無しの初期化処理のみ自動的に行う
//	if (!s_upInstance->Initialize())
//	{
//		s_upInstance->Finalize();
//	}
//
//	return *s_upInstance;
//}